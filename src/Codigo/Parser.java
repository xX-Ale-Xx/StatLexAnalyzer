
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Codigo;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\020\000\002\002\004\000\002\002\007\000\002\010" +
    "\004\000\002\010\003\000\002\010\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\006\010\000" +
    "\002\007\003\000\002\007\003\000\002\004\016\000\002" +
    "\004\015\000\002\011\003\000\002\011\003\000\002\011" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\057\000\004\004\005\001\002\000\004\002\061\001" +
    "\002\000\014\012\013\014\014\016\016\021\012\022\006" +
    "\001\002\000\022\005\ufff3\010\ufff3\011\ufff3\012\ufff3\014" +
    "\ufff3\016\ufff3\021\ufff3\022\ufff3\001\002\000\016\005\ufffe" +
    "\012\ufffe\014\ufffe\016\ufffe\021\ufffe\022\ufffe\001\002\000" +
    "\016\005\ufffb\012\ufffb\014\ufffb\016\ufffb\021\ufffb\022\ufffb" +
    "\001\002\000\016\005\ufffc\012\ufffc\014\ufffc\016\ufffc\021" +
    "\ufffc\022\ufffc\001\002\000\022\005\ufff4\010\ufff4\011\ufff4" +
    "\012\ufff4\014\ufff4\016\ufff4\021\ufff4\022\ufff4\001\002\000" +
    "\004\007\052\001\002\000\004\015\040\001\002\000\016" +
    "\005\023\012\013\014\022\016\016\021\012\022\006\001" +
    "\002\000\022\005\ufff2\010\ufff2\011\ufff2\012\ufff2\014\ufff2" +
    "\016\ufff2\021\ufff2\022\ufff2\001\002\000\016\005\ufffd\012" +
    "\ufffd\014\ufffd\016\ufffd\021\ufffd\022\ufffd\001\002\000\016" +
    "\005\ufffa\012\ufffa\014\ufffa\016\ufffa\021\ufffa\022\ufffa\001" +
    "\002\000\016\005\uffff\012\uffff\014\uffff\016\uffff\021\uffff" +
    "\022\uffff\001\002\000\004\015\026\001\002\000\004\004" +
    "\024\001\002\000\004\006\025\001\002\000\004\002\000" +
    "\001\002\000\004\013\027\001\002\000\004\015\030\001" +
    "\002\000\004\015\031\001\002\000\004\016\032\001\002" +
    "\000\004\017\033\001\002\000\004\020\034\001\002\000" +
    "\012\012\013\016\016\021\012\022\006\001\002\000\004" +
    "\005\036\001\002\000\004\006\037\001\002\000\016\005" +
    "\ufff6\012\ufff6\014\ufff6\016\ufff6\021\ufff6\022\ufff6\001\002" +
    "\000\004\013\041\001\002\000\004\015\042\001\002\000" +
    "\004\015\043\001\002\000\004\016\044\001\002\000\004" +
    "\017\045\001\002\000\004\020\046\001\002\000\012\012" +
    "\013\016\016\021\012\022\006\001\002\000\004\005\050" +
    "\001\002\000\004\006\051\001\002\000\016\005\ufff5\012" +
    "\ufff5\014\ufff5\016\ufff5\021\ufff5\022\ufff5\001\002\000\012" +
    "\012\013\016\016\021\012\022\006\001\002\000\004\011" +
    "\056\001\002\000\006\010\ufff8\011\ufff8\001\002\000\006" +
    "\010\ufff7\011\ufff7\001\002\000\012\012\013\016\016\021" +
    "\012\022\006\001\002\000\004\010\060\001\002\000\022" +
    "\005\ufff9\010\ufff9\011\ufff9\012\ufff9\014\ufff9\016\ufff9\021" +
    "\ufff9\022\ufff9\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\057\000\004\002\003\001\001\000\002\001\001\000" +
    "\016\003\006\004\016\005\010\006\007\010\014\011\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\020\005\010\006\007\011" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\034\005\010" +
    "\006\007\011\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\046\005\010\006\007\011\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\006\054\007\052\011\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\054\007\056\011\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado = ""; 

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arbol start_val = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= PROGRAM LC END PROGRAM PYC 
            {
              arbol RESULT =null;
		int prog1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int prog1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object prog1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lc1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lc1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		arbol lc1 = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int finright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int prog2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int prog2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object prog2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pcomaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcomaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pcoma = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol inicio = new arbol("S");
inicio.addHijo(new arbol(prog1.toString()));
inicio.addHijo(lc1);
inicio.addHijo(new arbol(fin.toString()));
inicio.addHijo(new arbol(prog2.toString()));
inicio.addHijo(new arbol(pcoma.toString()));
RESULT = inicio; 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LC ::= LC COD 
            {
              arbol RESULT =null;
		int lc1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lc1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arbol lc1 = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int codigo1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int codigo1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol codigo1 = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol lc = new arbol("LC");
lc.addHijo(lc1);
lc.addHijo(codigo1);
RESULT = lc;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LC",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LC ::= COD 
            {
              arbol RESULT =null;
		int codigo2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int codigo2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol codigo2 = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol lc = new arbol("LC");
lc.addHijo(codigo2);
RESULT = lc;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LC",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LC ::= DEC 
            {
              arbol RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol dec = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol lc = new arbol("LC");
lc.addHijo(dec);
RESULT = lc;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LC",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // COD ::= FUNC 
            {
              arbol RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // COD ::= OPARIT 
            {
              arbol RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol op = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol cod = new arbol("COD");
cod.addHijo(op);
RESULT = cod;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // COD ::= E 
            {
              arbol RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol val = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol cod = new arbol("COD");
cod.addHijo(val);
RESULT = cod;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // OPARIT ::= OPERACION PARIZ VALOR COMA VALOR PARDE 
            {
              arbol RESULT =null;
		int operacionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int operacionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object operacion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int parentesis1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int parentesis1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object parentesis1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int num1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		arbol num1 = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arbol num2 = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int parentesis2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parentesis2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object parentesis2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol oparit = new arbol("OPARIT");
oparit.addHijo(new arbol(operacion.toString()));
oparit.addHijo(new arbol(parentesis1.toString()));
oparit.addHijo(num1);
oparit.addHijo(new arbol(c.toString()));
oparit.addHijo(num2);
oparit.addHijo(new arbol(parentesis2.toString()));
RESULT = oparit;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARIT",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VALOR ::= E 
            {
              arbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol e = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol val = new arbol("VALOR");
val.addHijo(e);
RESULT = val;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VALOR ::= OPARIT 
            {
              arbol RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol op = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol oper = new arbol("VALOR OP");
oper.addHijo(op);
RESULT = oper;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DEC ::= LC VAR DOSP TIPO DOSP DOSP ID MENOR GUION COD END PYC 
            {
              arbol RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		arbol lc = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int dosp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int dosp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object dosp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int dosp3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int dosp3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object dosp3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int dosp4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int dosp4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object dosp4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int menorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int menorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object menor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int guionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int guionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object guion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int codleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		arbol cod = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pycleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pycright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pyc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol declarar = new arbol("DEC");
declarar.addHijo(lc);
declarar.addHijo(new arbol(var.toString()));
declarar.addHijo(new arbol(dosp1.toString()));

declarar.addHijo(new arbol(tipo.toString()));

declarar.addHijo(new arbol(dosp3.toString()));
declarar.addHijo(new arbol(dosp4.toString()));

declarar.addHijo(new arbol(id.toString()));
declarar.addHijo(new arbol(menor.toString()));
declarar.addHijo(new arbol(guion.toString()));
declarar.addHijo(cod);
declarar.addHijo(new arbol(end.toString()));
declarar.addHijo(new arbol(pyc.toString()));
RESULT = declarar;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEC",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DEC ::= VAR DOSP TIPO DOSP DOSP ID MENOR GUION COD END PYC 
            {
              arbol RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int dosp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int dosp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object dosp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int dosp3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int dosp3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object dosp3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int dosp4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int dosp4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object dosp4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int menorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int menorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object menor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int guionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int guionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object guion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int codleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		arbol cod = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pycleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pycright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pyc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol declarar = new arbol("DEC");
declarar.addHijo(new arbol(var.toString()));
declarar.addHijo(new arbol(dosp1.toString()));

declarar.addHijo(new arbol(tipo.toString()));

declarar.addHijo(new arbol(dosp3.toString()));
declarar.addHijo(new arbol(dosp4.toString()));

declarar.addHijo(new arbol(id.toString()));
declarar.addHijo(new arbol(menor.toString()));
declarar.addHijo(new arbol(guion.toString()));
declarar.addHijo(cod);
declarar.addHijo(new arbol(end.toString()));
declarar.addHijo(new arbol(pyc.toString()));
RESULT = declarar;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEC",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // E ::= ENTERO 
            {
              arbol RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ent = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol val = new arbol("E");
val.addHijo(new arbol(ent));
RESULT = val;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // E ::= DECIMAL 
            {
              arbol RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol val = new arbol("E");
val.addHijo(new arbol(dec));

RESULT = val;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // E ::= ID 
            {
              arbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol val = new arbol("E");
val.addHijo(new arbol(id.toString()));
RESULT = val;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
