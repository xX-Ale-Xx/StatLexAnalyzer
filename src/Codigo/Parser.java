
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Codigo;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\002\004\000\002\002\006\000\002\013" +
    "\004\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\004\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\010\014\000\002\011\004\000\002\011\003" +
    "\000\002\012\012\000\002\012\012\000\002\012\012\000" +
    "\002\012\012\000\002\006\010\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\004\016\000\002\004" +
    "\015\000\002\016\021\000\002\016\020\000\002\020\012" +
    "\000\002\021\015\000\002\022\003\000\002\022\003\000" +
    "\002\015\005\000\002\015\003\000\002\005\006\000\002" +
    "\017\005\000\002\017\004\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\004\004\005\001\002\000\004\002\241\001" +
    "\002\000\020\003\021\012\013\014\015\022\006\025\023" +
    "\026\022\033\014\001\002\000\004\015\224\001\002\000" +
    "\022\003\ufffe\005\ufffe\012\ufffe\014\ufffe\022\ufffe\025\ufffe" +
    "\026\ufffe\033\ufffe\001\002\000\022\003\ufffa\005\ufffa\012" +
    "\ufffa\014\ufffa\022\ufffa\025\ufffa\026\ufffa\033\ufffa\001\002" +
    "\000\022\003\ufffb\005\ufffb\012\ufffb\014\ufffb\022\ufffb\025" +
    "\ufffb\026\ufffb\033\ufffb\001\002\000\022\003\ufffc\005\ufffc" +
    "\012\ufffc\014\ufffc\022\ufffc\025\ufffc\026\ufffc\033\ufffc\001" +
    "\002\000\004\007\217\001\002\000\004\007\144\001\002" +
    "\000\004\015\132\001\002\000\022\003\ufff7\005\ufff7\012" +
    "\ufff7\014\ufff7\022\ufff7\025\ufff7\026\ufff7\033\ufff7\001\002" +
    "\000\022\003\ufff9\005\ufff9\012\ufff9\014\ufff9\022\ufff9\025" +
    "\ufff9\026\ufff9\033\ufff9\001\002\000\022\003\021\005\101" +
    "\012\013\014\100\022\076\025\023\026\022\033\014\001" +
    "\002\000\012\006\075\014\071\022\074\026\073\001\002" +
    "\000\004\015\050\001\002\000\004\007\026\001\002\000" +
    "\022\003\ufffd\005\ufffd\012\ufffd\014\ufffd\022\ufffd\025\ufffd" +
    "\026\ufffd\033\ufffd\001\002\000\022\003\ufff8\005\ufff8\012" +
    "\ufff8\014\ufff8\022\ufff8\025\ufff8\026\ufff8\033\ufff8\001\002" +
    "\000\006\021\031\024\027\001\002\000\016\012\013\016" +
    "\042\025\023\041\041\042\036\043\034\001\002\000\004" +
    "\010\033\001\002\000\004\016\032\001\002\000\006\005" +
    "\uffda\010\uffda\001\002\000\030\003\uffdc\005\uffdc\010\uffdc" +
    "\011\uffdc\012\uffdc\014\uffdc\022\uffdc\023\uffdc\025\uffdc\026" +
    "\uffdc\033\uffdc\001\002\000\012\005\uffd6\010\uffd6\011\uffd6" +
    "\023\uffd6\001\002\000\010\005\uffdd\011\uffdd\023\uffdd\001" +
    "\002\000\012\005\uffd8\010\uffd8\011\uffd8\023\uffd8\001\002" +
    "\000\012\005\uffe7\010\uffe7\011\uffe7\023\uffe7\001\002\000" +
    "\012\005\uffe8\010\uffe8\011\uffe8\023\uffe8\001\002\000\012" +
    "\005\uffd9\010\uffd9\011\uffd9\023\uffd9\001\002\000\012\005" +
    "\uffd7\010\uffd7\011\uffd7\023\uffd7\001\002\000\006\011\045" +
    "\023\046\001\002\000\012\005\uffe9\010\uffe9\011\uffe9\023" +
    "\uffe9\001\002\000\016\012\013\016\042\025\023\041\041" +
    "\042\036\043\034\001\002\000\006\005\uffdb\010\uffdb\001" +
    "\002\000\010\005\uffde\011\uffde\023\uffde\001\002\000\004" +
    "\015\051\001\002\000\006\027\052\031\053\001\002\000" +
    "\004\030\065\001\002\000\004\030\054\001\002\000\006" +
    "\016\055\043\057\001\002\000\004\020\uffe0\001\002\000" +
    "\004\020\060\001\002\000\004\020\uffdf\001\002\000\004" +
    "\032\061\001\002\000\006\021\031\024\027\001\002\000" +
    "\004\005\063\001\002\000\004\006\064\001\002\000\022" +
    "\003\uffe1\005\uffe1\012\uffe1\014\uffe1\022\uffe1\025\uffe1\026" +
    "\uffe1\033\uffe1\001\002\000\016\012\013\016\042\025\023" +
    "\041\041\042\036\043\034\001\002\000\006\005\067\011" +
    "\045\001\002\000\004\006\070\001\002\000\022\003\uffe2" +
    "\005\uffe2\012\uffe2\014\uffe2\022\uffe2\025\uffe2\026\uffe2\033" +
    "\uffe2\001\002\000\022\003\ufff5\005\ufff5\012\ufff5\014\ufff5" +
    "\022\ufff5\025\ufff5\026\ufff5\033\ufff5\001\002\000\022\003" +
    "\ufff6\005\ufff6\012\ufff6\014\ufff6\022\ufff6\025\ufff6\026\ufff6" +
    "\033\ufff6\001\002\000\022\003\ufff3\005\ufff3\012\ufff3\014" +
    "\ufff3\022\ufff3\025\ufff3\026\ufff3\033\ufff3\001\002\000\022" +
    "\003\ufff4\005\ufff4\012\ufff4\014\ufff4\022\ufff4\025\ufff4\026" +
    "\ufff4\033\ufff4\001\002\000\022\003\ufff2\005\ufff2\012\ufff2" +
    "\014\ufff2\022\ufff2\025\ufff2\026\ufff2\033\ufff2\001\002\000" +
    "\004\015\115\001\002\000\022\003\uffff\005\uffff\012\uffff" +
    "\014\uffff\022\uffff\025\uffff\026\uffff\033\uffff\001\002\000" +
    "\004\015\103\001\002\000\004\004\102\001\002\000\004" +
    "\002\000\001\002\000\004\013\104\001\002\000\004\015" +
    "\105\001\002\000\004\015\106\001\002\000\004\016\107" +
    "\001\002\000\004\017\110\001\002\000\004\020\111\001" +
    "\002\000\016\012\013\016\042\025\023\041\041\042\036" +
    "\043\034\001\002\000\004\005\113\001\002\000\004\006" +
    "\114\001\002\000\022\003\uffe6\005\uffe6\012\uffe6\014\uffe6" +
    "\022\uffe6\025\uffe6\026\uffe6\033\uffe6\001\002\000\004\013" +
    "\116\001\002\000\004\015\117\001\002\000\004\015\120" +
    "\001\002\000\004\021\121\001\002\000\004\016\122\001" +
    "\002\000\004\017\123\001\002\000\004\020\124\001\002" +
    "\000\004\024\125\001\002\000\016\012\013\016\042\025" +
    "\023\041\041\042\036\043\034\001\002\000\006\011\045" +
    "\023\127\001\002\000\004\005\130\001\002\000\004\006" +
    "\131\001\002\000\022\003\uffe4\005\uffe4\012\uffe4\014\uffe4" +
    "\022\uffe4\025\uffe4\026\uffe4\033\uffe4\001\002\000\004\013" +
    "\133\001\002\000\004\015\134\001\002\000\004\015\135" +
    "\001\002\000\004\016\136\001\002\000\004\017\137\001" +
    "\002\000\004\020\140\001\002\000\016\012\013\016\042" +
    "\025\023\041\041\042\036\043\034\001\002\000\004\005" +
    "\142\001\002\000\004\006\143\001\002\000\022\003\uffe5" +
    "\005\uffe5\012\uffe5\014\uffe5\022\uffe5\025\uffe5\026\uffe5\033" +
    "\uffe5\001\002\000\012\035\147\036\150\037\146\040\145" +
    "\001\002\000\004\015\210\001\002\000\004\015\201\001" +
    "\002\000\004\015\172\001\002\000\004\015\163\001\002" +
    "\000\014\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef\001" +
    "\002\000\014\034\153\035\147\036\150\037\146\040\145" +
    "\001\002\000\004\033\155\001\002\000\014\034\ufff0\035" +
    "\ufff0\036\ufff0\037\ufff0\040\ufff0\001\002\000\004\005\156" +
    "\001\002\000\004\006\157\001\002\000\004\010\160\001" +
    "\002\000\004\005\161\001\002\000\004\006\162\001\002" +
    "\000\022\003\ufff1\005\ufff1\012\ufff1\014\ufff1\022\ufff1\025" +
    "\ufff1\026\ufff1\033\ufff1\001\002\000\004\015\164\001\002" +
    "\000\004\013\165\001\002\000\004\030\166\001\002\000" +
    "\006\021\031\024\027\001\002\000\004\005\170\001\002" +
    "\000\004\006\171\001\002\000\014\034\uffec\035\uffec\036" +
    "\uffec\037\uffec\040\uffec\001\002\000\004\015\173\001\002" +
    "\000\004\013\174\001\002\000\004\030\175\001\002\000" +
    "\012\016\042\041\041\042\036\043\034\001\002\000\004" +
    "\005\177\001\002\000\004\006\200\001\002\000\014\034" +
    "\uffee\035\uffee\036\uffee\037\uffee\040\uffee\001\002\000\004" +
    "\015\202\001\002\000\004\013\203\001\002\000\004\030" +
    "\204\001\002\000\006\021\031\024\027\001\002\000\004" +
    "\005\206\001\002\000\004\006\207\001\002\000\014\034" +
    "\uffed\035\uffed\036\uffed\037\uffed\040\uffed\001\002\000\004" +
    "\015\211\001\002\000\004\013\212\001\002\000\004\030" +
    "\213\001\002\000\006\021\031\024\027\001\002\000\004" +
    "\005\215\001\002\000\004\006\216\001\002\000\014\034" +
    "\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\001\002\000\016" +
    "\012\013\016\042\025\023\041\041\042\036\043\034\001" +
    "\002\000\004\011\221\001\002\000\016\012\013\016\042" +
    "\025\023\041\041\042\036\043\034\001\002\000\004\010" +
    "\223\001\002\000\030\003\uffea\005\uffea\010\uffea\011\uffea" +
    "\012\uffea\014\uffea\022\uffea\023\uffea\025\uffea\026\uffea\033" +
    "\uffea\001\002\000\004\013\225\001\002\000\004\015\226" +
    "\001\002\000\004\015\227\001\002\000\004\021\230\001" +
    "\002\000\004\016\231\001\002\000\004\017\232\001\002" +
    "\000\004\020\233\001\002\000\004\024\234\001\002\000" +
    "\016\012\013\016\042\025\023\041\041\042\036\043\034" +
    "\001\002\000\006\011\045\023\236\001\002\000\004\005" +
    "\237\001\002\000\004\006\240\001\002\000\022\003\uffe3" +
    "\005\uffe3\012\uffe3\014\uffe3\022\uffe3\025\uffe3\026\uffe3\033" +
    "\uffe3\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\004\002\003\001\001\000\002\001\001\000" +
    "\024\003\006\004\023\005\010\006\007\010\015\013\017" +
    "\016\011\020\016\021\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\076" +
    "\005\010\006\007\010\015\020\016\021\024\001\001\000" +
    "\004\023\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\027\001" +
    "\001\000\014\005\036\006\037\007\034\014\043\015\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\036\006\037\007\046\014\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\005\036\006\037\007\034\014\043\015\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\036\006\037\007\111\014\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\005\036\006\037\007\034\014\043" +
    "\015\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\036\006\037\007\140" +
    "\014\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\151\012\150\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\153\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\166\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\204\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\213\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\036\006\037" +
    "\007\217\014\043\001\001\000\002\001\001\000\012\005" +
    "\036\006\037\007\221\014\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\036\006\037\007\034\014\043\015\234\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado = ""; 

    public void syntax_error(Symbol s)
    {
            error e = new error("Llego un "+String.valueOf(s.value) + " no esperado", "Sintactico", String.valueOf(s.right), String.valueOf(s.left));
            Listas.setListaErrores(e);
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            error e = new error(String.valueOf(s.value), "Sintactico", String.valueOf(s.right), String.valueOf(s.left));
            Listas.setListaErrores(e);
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arbol start_val = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= PROGRAM LC END PROGRAM 
            {
              arbol RESULT =null;
		int prog1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int prog1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object prog1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lc1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lc1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		arbol lc1 = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int finright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int prog2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int prog2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object prog2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol inicio = new arbol("S");
inicio.addHijo(new arbol(prog1.toString()));
inicio.addHijo(lc1);
inicio.addHijo(new arbol(fin.toString()));
inicio.addHijo(new arbol(prog2.toString()));
inicio.addHijo(new arbol(";"));
RESULT = inicio; 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LC ::= LC COD 
            {
              arbol RESULT =null;
		int lc1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lc1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arbol lc1 = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int codigo1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int codigo1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol codigo1 = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol lc = new arbol("LC");
lc.addHijo(lc1);
lc.addHijo(codigo1);
RESULT = lc;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LC",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LC ::= COD 
            {
              arbol RESULT =null;
		int codigo2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int codigo2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol codigo2 = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol lc = new arbol("LC");
lc.addHijo(codigo2);
RESULT = lc;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LC",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LC ::= DEC 
            {
              arbol RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol dec = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol lc = new arbol("LC");
lc.addHijo(dec);
System.out.print("este es: "+ lc.hijos.get(0).lex );
RESULT = lc;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LC",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LC ::= DARR 
            {
              arbol RESULT =null;
		int decarrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decarrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol decarr = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol lc = new arbol("LC");
lc.addHijo(decarr);
RESULT = lc;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LC",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // COD ::= FUNC 
            {
              arbol RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol func = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol oper = new arbol("COD");
oper.addHijo(func);
RESULT = oper;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // COD ::= OPARIT 
            {
              arbol RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol op = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol cod = new arbol("COD");
cod.addHijo(op);
RESULT = cod;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // COD ::= IMP 
            {
              arbol RESULT =null;
		int impleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int impright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol imp = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol cod = new arbol("COD");
cod.addHijo(imp);
RESULT = cod;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // COD ::= IMPC 
            {
              arbol RESULT =null;
		int impcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int impcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol impc = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol cod = new arbol("COD");
cod.addHijo(impc);
RESULT = cod;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // COD ::= GRAPH 
            {
              arbol RESULT =null;
		int graficleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int graficright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol grafic = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol lc = new arbol("COD");
lc.addHijo(grafic);
RESULT = lc;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // COD ::= error err 
            {
              arbol RESULT =null;
		
RESULT = new arbol(";");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COD",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // err ::= VAR 
            {
              arbol RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("err",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // err ::= ARR 
            {
              arbol RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("err",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // err ::= CONSOLE 
            {
              arbol RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("err",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // err ::= PYC 
            {
              arbol RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("err",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // GRAPH ::= TIPOGRAPH PARIZ SENTENCES EXEC TIPOGRAPH END PYC PARDE END PYC 
            {
              arbol RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		arbol sent = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int tipo2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tipo2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object tipo2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int pycleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pycright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object pyc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int end2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int end2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object end2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pyc2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pyc2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pyc2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol dat = new arbol("GRAPH");
dat.addHijo(new arbol(tipo.toString()));
dat.addHijo(new arbol(p1.toString()));

dat.addHijo(sent);

dat.addHijo(new arbol(ex.toString()));
dat.addHijo(new arbol(tipo2.toString()));
dat.addHijo(new arbol(end.toString()));
dat.addHijo(new arbol(pyc.toString()));
dat.addHijo(new arbol(p2.toString()));
dat.addHijo(new arbol(end2.toString()));
dat.addHijo(new arbol(pyc2.toString()));
RESULT = dat;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GRAPH",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCES ::= SENTENCES DATOS 
            {
              arbol RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arbol sent = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int datosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol datos = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol dat = new arbol("SENTENCES");
dat.addHijo(sent);
dat.addHijo(datos);
RESULT = dat;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCES",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCES ::= DATOS 
            {
              arbol RESULT =null;
		int datosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol datos = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol dat = new arbol("SENTENCES");
dat.addHijo(datos);
RESULT = dat;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCES",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DATOS ::= TITULO DOSP DOSP TIPO IGUAL E END PYC 
            {
              arbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int iguleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iguright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object igu = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		arbol e = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pycleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pycright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pyc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol oparit = new arbol("DATOS");
oparit.addHijo(new arbol(t.toString()));
oparit.addHijo(new arbol(p1.toString()));
oparit.addHijo(new arbol(p2.toString()));
oparit.addHijo(new arbol(tip.toString()));
oparit.addHijo(new arbol(igu.toString()));
oparit.addHijo(e);
oparit.addHijo(new arbol(end.toString()));
oparit.addHijo(new arbol(pyc.toString()));
oparit.addHijo(new arbol(String.valueOf(tleft)));
oparit.addHijo(new arbol(String.valueOf(tright)));
RESULT = oparit;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DATOS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DATOS ::= VALUES DOSP DOSP TIPO IGUAL LIST END PYC 
            {
              arbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int iguleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iguright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object igu = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		arbol e = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pycleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pycright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pyc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol oparit = new arbol("DATOS");
oparit.addHijo(new arbol(t.toString()));
oparit.addHijo(new arbol(p1.toString()));
oparit.addHijo(new arbol(p2.toString()));
oparit.addHijo(new arbol(tip.toString()));
oparit.addHijo(new arbol(igu.toString()));
oparit.addHijo(e);
oparit.addHijo(new arbol(end.toString()));
oparit.addHijo(new arbol(pyc.toString()));
oparit.addHijo(new arbol(String.valueOf(tleft)));
oparit.addHijo(new arbol(String.valueOf(tright)));
RESULT = oparit;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DATOS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DATOS ::= LABEL DOSP DOSP TIPO IGUAL LIST END PYC 
            {
              arbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int iguleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iguright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object igu = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		arbol e = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pycleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pycright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pyc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol oparit = new arbol("DATOS");
oparit.addHijo(new arbol(t.toString()));
oparit.addHijo(new arbol(p1.toString()));
oparit.addHijo(new arbol(p2.toString()));
oparit.addHijo(new arbol(tip.toString()));
oparit.addHijo(new arbol(igu.toString()));
oparit.addHijo(e);
oparit.addHijo(new arbol(end.toString()));
oparit.addHijo(new arbol(pyc.toString()));
oparit.addHijo(new arbol(String.valueOf(tleft)));
oparit.addHijo(new arbol(String.valueOf(tright)));
RESULT = oparit;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DATOS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DATOS ::= EJE DOSP DOSP TIPO IGUAL LIST END PYC 
            {
              arbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int iguleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iguright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object igu = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		arbol e = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pycleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pycright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pyc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol oparit = new arbol("DATOS");
oparit.addHijo(new arbol(t.toString()));
oparit.addHijo(new arbol(p1.toString()));
oparit.addHijo(new arbol(p2.toString()));
oparit.addHijo(new arbol(tip.toString()));
oparit.addHijo(new arbol(igu.toString()));
oparit.addHijo(e);
oparit.addHijo(new arbol(end.toString()));
oparit.addHijo(new arbol(pyc.toString()));
oparit.addHijo(new arbol(String.valueOf(tleft)));
oparit.addHijo(new arbol(String.valueOf(tright)));
RESULT = oparit; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DATOS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OPARIT ::= OPERACION PARIZ VALOR COMA VALOR PARDE 
            {
              arbol RESULT =null;
		int operacionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int operacionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object operacion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int parentesis1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int parentesis1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object parentesis1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int num1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		arbol num1 = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arbol num2 = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int parentesis2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parentesis2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object parentesis2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol oparit = new arbol("OPARIT");
oparit.addHijo(new arbol(operacion.toString()));
oparit.addHijo(new arbol(parentesis1.toString()));
oparit.addHijo(num1);
oparit.addHijo(new arbol(c.toString()));
oparit.addHijo(num2);
oparit.addHijo(new arbol(parentesis2.toString()));
RESULT = oparit;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARIT",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VALOR ::= E 
            {
              arbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol e = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol val = new arbol("VALOR");
val.addHijo(e);
RESULT = val;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VALOR ::= OPARIT 
            {
              arbol RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol op = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol oper = new arbol("VALOR OP");
oper.addHijo(op);
RESULT = oper;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VALOR ::= FUNC 
            {
              arbol RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol func = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol oper = new arbol("VALOR FUNC");
oper.addHijo(func);
RESULT = oper;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DEC ::= LC VAR DOSP TIPO DOSP DOSP ID MENOR GUION VALOR END PYC 
            {
              arbol RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		arbol lc = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int dosp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int dosp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object dosp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int dosp3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int dosp3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object dosp3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int dosp4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int dosp4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object dosp4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int menorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int menorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object menor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int guionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int guionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object guion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int codleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		arbol cod = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pycleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pycright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pyc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol declarar = new arbol("DEC");
declarar.addHijo(lc);
declarar.addHijo(new arbol(var.toString()));
declarar.addHijo(new arbol(dosp1.toString()));
declarar.addHijo(new arbol(tipo.toString()));

declarar.addHijo(new arbol(dosp3.toString()));
declarar.addHijo(new arbol(dosp4.toString()));

declarar.addHijo(new arbol(id.toString()));
declarar.addHijo(new arbol(menor.toString()));
declarar.addHijo(new arbol(guion.toString()));
declarar.addHijo(cod);
declarar.addHijo(new arbol(end.toString()));
declarar.addHijo(new arbol(pyc.toString()));
declarar.addHijo(new arbol(String.valueOf(varleft+1)));
declarar.addHijo(new arbol(String.valueOf(varright+1)));
RESULT = declarar;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEC",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DEC ::= VAR DOSP TIPO DOSP DOSP ID MENOR GUION VALOR END PYC 
            {
              arbol RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int dosp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int dosp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object dosp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int dosp3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int dosp3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object dosp3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int dosp4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int dosp4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object dosp4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int menorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int menorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object menor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int guionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int guionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object guion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int codleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		arbol cod = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pycleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pycright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pyc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

arbol declarar = new arbol("DEC");
declarar.addHijo(new arbol(var.toString()));
declarar.addHijo(new arbol(dosp1.toString()));

declarar.addHijo(new arbol(tipo.toString()));

declarar.addHijo(new arbol(dosp3.toString()));
declarar.addHijo(new arbol(dosp4.toString()));

declarar.addHijo(new arbol(id.toString()));
declarar.addHijo(new arbol(menor.toString()));
declarar.addHijo(new arbol(guion.toString()));
declarar.addHijo(cod);
declarar.addHijo(new arbol(end.toString()));
declarar.addHijo(new arbol(pyc.toString()));
declarar.addHijo(new arbol(String.valueOf(varleft+1)));
declarar.addHijo(new arbol(String.valueOf(varright+1)));
RESULT = declarar;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEC",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DARR ::= LC ARR DOSP TIPO DOSP DOSP ARROBA ID MENOR GUION LLDER LVAL LLIZ END PYC 
            {
              arbol RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).right;
		arbol lc = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-14)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int dosp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int dosp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		Object dosp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int dosp3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int dosp3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object dosp3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int dosp4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int dosp4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object dosp4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int arrobaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int arrobaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object arroba = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int menorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int menorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object menor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int guionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int guionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object guion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int llderechaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int llderecharight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object llderecha = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lvalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lvalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		arbol lval = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int llizquierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int llizquierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object llizquier = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pycleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pycright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pyc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol declarar = new arbol("DARR");
declarar.addHijo(lc);
declarar.addHijo(new arbol(arr.toString()));
declarar.addHijo(new arbol(dosp1.toString()));
System.out.println("ESTEEEE"+id);
declarar.addHijo(new arbol(tipo.toString()));

declarar.addHijo(new arbol(dosp3.toString()));
declarar.addHijo(new arbol(dosp4.toString()));
declarar.addHijo(new arbol(arroba.toString()));
declarar.addHijo(new arbol(id.toString()));
declarar.addHijo(new arbol(menor.toString()));
declarar.addHijo(new arbol(guion.toString()));

declarar.addHijo(new arbol(llderecha.toString()));
declarar.addHijo(lval);
declarar.addHijo(new arbol(llizquier.toString()));
declarar.addHijo(new arbol(end.toString()));
declarar.addHijo(new arbol(pyc.toString()));
declarar.addHijo(new arbol(String.valueOf(arrleft+1)));
declarar.addHijo(new arbol(String.valueOf(arrright+1)));
RESULT = declarar;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DARR",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DARR ::= ARR DOSP TIPO DOSP DOSP ARROBA ID MENOR GUION LLDER LVAL LLIZ END PYC 
            {
              arbol RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int dosp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int dosp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		Object dosp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int dosp3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int dosp3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object dosp3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int dosp4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int dosp4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object dosp4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int arrobaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int arrobaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object arroba = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int menorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int menorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object menor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int guionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int guionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object guion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int llderechaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int llderecharight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object llderecha = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lvalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lvalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		arbol lval = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int llizquierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int llizquierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object llizquier = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pycleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pycright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pyc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol declarar = new arbol("DARR");
declarar.addHijo(new arbol(arr.toString()));
declarar.addHijo(new arbol(dosp1.toString()));

declarar.addHijo(new arbol(tipo.toString()));

declarar.addHijo(new arbol(dosp3.toString()));
declarar.addHijo(new arbol(dosp4.toString()));
declarar.addHijo(new arbol(arroba.toString()));
declarar.addHijo(new arbol(id.toString()));
declarar.addHijo(new arbol(menor.toString()));
declarar.addHijo(new arbol(guion.toString()));
declarar.addHijo(new arbol(llderecha.toString()));
declarar.addHijo(lval);
declarar.addHijo(new arbol(llizquier.toString()));
declarar.addHijo(new arbol(end.toString()));
declarar.addHijo(new arbol(pyc.toString()));
declarar.addHijo(new arbol(String.valueOf(arrleft+1)));
declarar.addHijo(new arbol(String.valueOf(arrright+1)));
RESULT = declarar;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DARR",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IMP ::= CONSOLE DOSP DOSP PRINT IGUAL LVAL END PYC 
            {
              arbol RESULT =null;
		int consleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int consright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object cons = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int dospleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int dospright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object dosp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int dosp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int dosp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object dosp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int printleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int printright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object print = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int igualleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lvalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lvalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		arbol lval = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pycleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pycright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pyc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol imp = new arbol("IMP");
imp.addHijo(new arbol(cons.toString()));
imp.addHijo(new arbol(dosp.toString()));
imp.addHijo(new arbol(dosp2.toString()));
imp.addHijo(new arbol(print.toString()));
imp.addHijo(new arbol(igual.toString()));
imp.addHijo(lval);
imp.addHijo(new arbol(end.toString()));
imp.addHijo(new arbol(pyc.toString()));
RESULT = imp;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMP",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IMPC ::= CONSOLE DOSP DOSP COLUMN IGUAL TCOLUMN GUION MAYOR LIST END PYC 
            {
              arbol RESULT =null;
		int consleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int consright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object cons = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int dospleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int dospright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object dosp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int columleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int columright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object colum = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int igualleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int tcolumnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tcolumnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		arbol tcolumn = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int guionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int guionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object guion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int mayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int mayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object may = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		arbol list = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pycleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pycright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pyc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol val = new arbol("IMPC");
val.addHijo(new arbol(cons.toString()));
val.addHijo(new arbol(dosp.toString()));
val.addHijo(new arbol(dosp.toString()));
val.addHijo(new arbol(colum.toString()));
val.addHijo(new arbol(igual.toString()));
val.addHijo(tcolumn);
val.addHijo(new arbol(guion.toString()));
val.addHijo(new arbol(may.toString()));
val.addHijo(list);
val.addHijo(new arbol(end.toString()));
val.addHijo(new arbol(pyc.toString()));
RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMPC",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TCOLUMN ::= ID 
            {
              arbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol val = new arbol("TCOLUMN");
val.addHijo(new arbol(id.toString()));
RESULT = val;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TCOLUMN",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TCOLUMN ::= CADENA 
            {
              arbol RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol val = new arbol("TCOLUMN");
val.addHijo(new arbol(cad));
RESULT = val;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TCOLUMN",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LVAL ::= LVAL COMA VALOR 
            {
              arbol RESULT =null;
		int lvalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lvalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		arbol lval = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int comaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int comaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object coma = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol valor = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol lval1 = new arbol("LVAL");
lval1.addHijo(lval);
lval1.addHijo(new arbol(coma.toString()));
lval1.addHijo(valor);
RESULT = lval1;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LVAL",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LVAL ::= VALOR 
            {
              arbol RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol valor = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol lval1 = new arbol("LVAL");
lval1.addHijo(valor);
RESULT = lval1;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LVAL",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FUNC ::= ESTADISTICO PARIZ LIST PARDE 
            {
              arbol RESULT =null;
		int operacionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int operacionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object operacion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int parentesis1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int parentesis1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object parentesis1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arbol list = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int parentesis2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parentesis2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object parentesis2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol funcion = new arbol("FUNC");
funcion.addHijo(new arbol(operacion.toString()));
funcion.addHijo(new arbol(parentesis1.toString()));
funcion.addHijo(list);
funcion.addHijo(new arbol(parentesis2.toString()));
RESULT = funcion;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LIST ::= LLDER LVAL LLIZ 
            {
              arbol RESULT =null;
		int lvalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lvalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arbol lval = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
arbol list = new arbol("LIST");
list.addHijo(lval);
RESULT = list;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LIST",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LIST ::= ARROBA ID 
            {
              arbol RESULT =null;
		int arrobaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arrobaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arroba = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol list = new arbol("LIST");
list.addHijo(new arbol(arroba.toString()));
list.addHijo(new arbol(id.toString()));
RESULT = list;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LIST",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E ::= ENTERO 
            {
              arbol RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ent = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol val = new arbol("E");
val.addHijo(new arbol(ent));
RESULT = val;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E ::= DECIMAL 
            {
              arbol RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol val = new arbol("E");
val.addHijo(new arbol(dec));

RESULT = val;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // E ::= ID 
            {
              arbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol val = new arbol("E");
val.addHijo(new arbol(id.toString()));
RESULT = val;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // E ::= CADENA 
            {
              arbol RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
arbol val = new arbol("E");
val.addHijo(new arbol(cad));
RESULT = val;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
